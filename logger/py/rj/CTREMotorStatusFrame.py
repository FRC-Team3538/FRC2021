# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rj

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CTREMotorStatusFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCTREMotorStatusFrame(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CTREMotorStatusFrame()
        x.Init(buf, n + offset)
        return x

    # CTREMotorStatusFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CTREMotorStatusFrame
    def FirmwareVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def BaseID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def DeviceID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def OutputCurrent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def BusVoltage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def OutputPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def OutputVoltage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def Temperature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def SelectedSensorPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def SelectedSensorVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def ClosedLoopError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def IntegralAccumulator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def ErrorDerivative(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def ClosedLoopTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def ActiveTrajectoryPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def ActiveTrajectoryVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def ActiveTrajectoryArbFeedFwd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def Faults(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def ResetOccured(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CTREMotorStatusFrame
    def LastError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def ControlMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def StatorCurrent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def SupplyCurrent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CTREMotorStatusFrame
    def FwdLimitSwitchClosed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CTREMotorStatusFrame
    def RevLimitSwitchClosed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CTREMotorStatusFrameStart(builder): builder.StartObject(25)
def CTREMotorStatusFrameAddFirmwareVersion(builder, firmwareVersion): builder.PrependInt32Slot(0, firmwareVersion, 0)
def CTREMotorStatusFrameAddBaseID(builder, baseID): builder.PrependInt32Slot(1, baseID, 0)
def CTREMotorStatusFrameAddDeviceID(builder, deviceID): builder.PrependInt32Slot(2, deviceID, 0)
def CTREMotorStatusFrameAddOutputCurrent(builder, outputCurrent): builder.PrependFloat64Slot(3, outputCurrent, 0.0)
def CTREMotorStatusFrameAddBusVoltage(builder, busVoltage): builder.PrependFloat64Slot(4, busVoltage, 0.0)
def CTREMotorStatusFrameAddOutputPercent(builder, outputPercent): builder.PrependFloat64Slot(5, outputPercent, 0.0)
def CTREMotorStatusFrameAddOutputVoltage(builder, outputVoltage): builder.PrependFloat64Slot(6, outputVoltage, 0.0)
def CTREMotorStatusFrameAddTemperature(builder, temperature): builder.PrependFloat64Slot(7, temperature, 0.0)
def CTREMotorStatusFrameAddSelectedSensorPosition(builder, selectedSensorPosition): builder.PrependInt32Slot(8, selectedSensorPosition, 0)
def CTREMotorStatusFrameAddSelectedSensorVelocity(builder, selectedSensorVelocity): builder.PrependInt32Slot(9, selectedSensorVelocity, 0)
def CTREMotorStatusFrameAddClosedLoopError(builder, closedLoopError): builder.PrependInt32Slot(10, closedLoopError, 0)
def CTREMotorStatusFrameAddIntegralAccumulator(builder, integralAccumulator): builder.PrependFloat64Slot(11, integralAccumulator, 0.0)
def CTREMotorStatusFrameAddErrorDerivative(builder, errorDerivative): builder.PrependFloat64Slot(12, errorDerivative, 0.0)
def CTREMotorStatusFrameAddClosedLoopTarget(builder, closedLoopTarget): builder.PrependFloat64Slot(13, closedLoopTarget, 0.0)
def CTREMotorStatusFrameAddActiveTrajectoryPosition(builder, activeTrajectoryPosition): builder.PrependInt32Slot(14, activeTrajectoryPosition, 0)
def CTREMotorStatusFrameAddActiveTrajectoryVelocity(builder, activeTrajectoryVelocity): builder.PrependInt32Slot(15, activeTrajectoryVelocity, 0)
def CTREMotorStatusFrameAddActiveTrajectoryArbFeedFwd(builder, activeTrajectoryArbFeedFwd): builder.PrependFloat64Slot(16, activeTrajectoryArbFeedFwd, 0.0)
def CTREMotorStatusFrameAddFaults(builder, faults): builder.PrependInt32Slot(17, faults, 0)
def CTREMotorStatusFrameAddResetOccured(builder, resetOccured): builder.PrependBoolSlot(18, resetOccured, 0)
def CTREMotorStatusFrameAddLastError(builder, lastError): builder.PrependInt32Slot(19, lastError, 0)
def CTREMotorStatusFrameAddControlMode(builder, controlMode): builder.PrependInt32Slot(20, controlMode, 0)
def CTREMotorStatusFrameAddStatorCurrent(builder, statorCurrent): builder.PrependFloat64Slot(21, statorCurrent, 0.0)
def CTREMotorStatusFrameAddSupplyCurrent(builder, supplyCurrent): builder.PrependFloat64Slot(22, supplyCurrent, 0.0)
def CTREMotorStatusFrameAddFwdLimitSwitchClosed(builder, fwdLimitSwitchClosed): builder.PrependInt32Slot(23, fwdLimitSwitchClosed, 0)
def CTREMotorStatusFrameAddRevLimitSwitchClosed(builder, revLimitSwitchClosed): builder.PrependInt32Slot(24, revLimitSwitchClosed, 0)
def CTREMotorStatusFrameEnd(builder): return builder.EndObject()
